name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:
    # ÊâãÂãïËß∏ÁôºÔºàÂª∫Ë≠∞ÈÄôÊ®£ÂÅöÔºåÊñπ‰æøÊ∏¨Ë©¶Ôºâ

jobs:
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: ÂÆâË£ù Bun
        run: curl -fsSL https://bun.sh/install | bash
      - name: Ë®≠ÂÆö Bun Ë∑ØÂæë
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH
      - name: Get version from package.json or git
        id: version
        run: |
          if [ -f "package.json" ] && node -e "v=require('./package.json').version; if(!v) process.exit(1)" 2>/dev/null; then
            VERSION=$(node -p "require('./package.json').version")
          else
            GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$GIT_TAG" ]; then
              VERSION="${GIT_TAG#v}"
            else
              VERSION="0.0.0-$(git rev-parse --short HEAD)"
            fi
          fi
          echo "‚úÖ Version detected: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Install dependencies & build
        run: |
          npm install
          npm run build
          zip -r build-${{ env.VERSION }}.zip .
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build-${{ env.VERSION }}.zip



  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4     # ‚úÖ Êñ∞Â¢ûÈÄôË°åÔºÅ
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: Run Automated Tests
        run: |
          echo "Running automated tests..."
          npm install                 # ‚úÖ ÈáçÊñ∞ÂÆâË£ù‰æùË≥¥
          npm test || (echo "‚ùå Tests failed" && exit 1)



  release:
    runs-on: ubuntu-latest
    needs: test
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: Check dist files
        run: |
          echo "Checking files in dist/"
          ls -al dist/
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "‚úÖ Tests passed. Releasing new dev build..."
          # Ê≥®ÊÑèÔºöÈÄôË£°‰ΩøÁî®‰∫Ü‰∏ÄÂÄãÊñ∞ÁöÑ timestamp Ê®ôÁ±§„ÄÇ
          # Áî±Êñº staging ÊúÉ‰æùË≥¥ÈÄôÂÄã releaseÔºåÊÇ®ÂèØ‰ª•ËÄÉÊÖÆÊòØÂê¶Ë¶ÅÂú® release Ê≠•È©ü‰ΩøÁî®Ëàá build Áõ∏ÂêåÁöÑÁâàÊú¨ËôüÔºå
          # ÊàñÊòØÂ∞á 'release' job Ë¶ñÁÇ∫ÂÖßÈÉ®Ê®ôË®òÔºåÁÑ∂ÂæåËÆì 'deploy-staging' ÊàêÁÇ∫Á¨¨‰∏ÄÂÄãÂ§ñÈÉ®ÂèØË¶ãÁöÑ 'staging-vX.X.X' Ê®ôÁ±§„ÄÇ
          # ÈÄôË£°Á∂≠ÊåÅÊÇ®ÂéüÊúâÁöÑ 'dev' Áí∞Â¢ÉÈáãÂá∫ÈÇèËºØ„ÄÇ
          gh release create "dev-$(date +%s)" dist/* --notes "Automated release after successful tests"



  deploy-staging:
    name: üß™ Deploy to Staging
    # üí• ‰∏ªË¶ÅËÆäÊõ¥ÔºöÂæû 'build' ÊîπÁÇ∫‰æùË≥¥ 'release'
    needs: release
    runs-on: ubuntu-latest
    environment: staging
    env:
      # ÈõñÁÑ∂ job ‰æùË≥¥ 'release'Ôºå‰ΩÜÁâàÊú¨Ëôü‰ªç‰æÜËá™ 'build'
      VERSION: ${{ needs.build.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: ÂÆâË£ù Bun
        run: curl -fsSL https://bun.sh/install | bash
      - name: Ë®≠ÂÆö Bun Ë∑ØÂæë
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Install GitHub CLI
        run: sudo apt install gh -y
      - name: Create Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # ÈÄôË£°Âª∫Ë≠∞‰ΩøÁî®Ëàá build Áõ∏ÂêåÁöÑÁâàÊú¨ËôüÔºå‰∏¶Âä†‰∏ä 'staging-' ÂâçÁ∂¥
          TAG="staging-${VERSION}"
          NOTE="üß™ Staging build for version ${VERSION}"
          echo "Creating release ${TAG}"
          # Á¢∫‰øùÊ™îÊ°àÂ≠òÂú®
          if [ ! -f "build-${VERSION}.zip" ]; then
            echo "‚ùå Build file not found: build-${VERSION}.zip"
            exit 1
          fi
          # ‰ΩøÁî® gh release create ‰æÜÊ®ôË®ò‰∏ÄÂÄã 'staging' ÁâàÊú¨ÁöÑ release
          gh release create "$TAG" "build-${VERSION}.zip" --notes "$NOTE" || {
            echo "‚ö†Ô∏è Staging release failed. Please check the logs."
            exit 1
          }
      - name: üí¨ Comment on PR/Commit
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `‚úÖ **Staging release completed**
            Version: \`${process.env.VERSION}\`
            Tag: \`staging-${process.env.VERSION}\`
            Environment: üß™ Staging`;
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });
            } else {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body
              });
            }



  deploy-production:
    name: üöÄ Deploy to Production
    # üí• ‰∏ªË¶ÅËÆäÊõ¥ÔºöÂæû‰æùË≥¥ [build, deploy-staging] ÊîπÁÇ∫Âè™‰æùË≥¥ 'deploy-staging'
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    env:
      VERSION: ${{ needs.build.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: ÂÆâË£ù Bun
        run: curl -fsSL https://bun.sh/install | bash
      - name: Ë®≠ÂÆö Bun Ë∑ØÂæë
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Install GitHub CLI
        run: sudo apt install gh -y
      - name: Create production release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üß© Using version: ${VERSION}"
          TAG="v${VERSION}"
          NOTE="üöÄ Production release for version ${VERSION}"
          echo "Creating release ${TAG}"
          if [ ! -f "build-${VERSION}.zip" ]; then
            echo "‚ùå Build file not found: build-${VERSION}.zip"
            exit 1
          fi
          gh release create "$TAG" "build-${VERSION}.zip" --notes "$NOTE" || {
            echo "‚ö†Ô∏è Release failed, rollbacking..."
            gh release delete "$TAG" -y || echo "‚ö†Ô∏è Rollback skipped (release not found)"
            exit 1
          }
      - name: üí¨ Comment on PR/Commit
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `üéâ **Production release deployed**
            Version: \`${process.env.VERSION}\`
            Tag: \`v${process.env.VERSION}\`
            Environment: üöÄ Production`;
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });
            } else {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body
              });
            }
