name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:  # 手動觸發（方便測試）
permissions:
  contents: read # 保持現有權限
  issues: write # ✅ 新增：允許建立和評論 Issue
  pull-requests: write # 允許在 PR 上評論 (可選，但建議保留)

jobs:
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 安裝 Bun
        run: curl -fsSL https://bun.sh/install | bash

      - name: 設定 Bun 路徑
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Get version from package.json or git
        id: version
        run: |
          if [ -f "package.json" ] && node -e "v=require('./package.json').version; if(!v) process.exit(1)" 2>/dev/null; then
            VERSION=$(node -p "require('./package.json').version")
          else
            GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$GIT_TAG" ]; then
              VERSION="${GIT_TAG#v}"
            else
              VERSION="0.0.0-$(git rev-parse --short HEAD)"
            fi
          fi
          echo "✅ Version detected: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies & build
        run: |
          npm install
          npm run build
          zip -r build-${{ env.VERSION }}.zip .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build-${{ env.VERSION }}.zip

  # ---------- UNIT TEST ----------
  unit-test:
    name: 🧪 Unit Test
    runs-on: ubuntu-latest
    needs: build
    env:
      TEST_ENV: unit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/

      - name: 安裝 Bun
        run: curl -fsSL https://bun.sh/install | bash

      - name: 設定 Bun 路徑
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Run Unit Tests and Generate Coverage Report
        run: |
          npm install
          # ✅ 執行 Jest 並產生覆蓋率報告
          npm run test:unit -- --coverage || (echo "❌ Unit tests failed" && exit 1)
          
      # ✅ 新增：將覆蓋率報告作為 Artifact 上傳
      - name: Upload Test Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          # 假設 Jest 預設輸出到 coverage/ 資料夾
          path: coverage/
          retention-days: 7

  # ---------- INTEGRATION TEST ----------
  integration-test:
    name: 🔗 Integration Test
    runs-on: ubuntu-latest
    needs: unit-test
    env:
      TEST_ENV: integration
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: Run Integration Tests
        run: |
          echo "Running Integration Tests in $TEST_ENV environment..."
          npm install
          npm run test:integration || (echo "❌ Unit tests failed" && exit 1)

  # ---------- DEV RELEASE ----------
  release:
    name: 📦 Dev Release
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test]
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: Check dist files
        run: |
          echo "Checking files in dist/"
          ls -al dist/
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "✅ Tests passed. Releasing new dev build..."
          gh release create "dev-$(date +%s)" dist/* --notes "Automated dev release after successful tests"

  # ---------- STAGING DEPLOY ----------
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, unit-test, integration-test]
    environment: staging
    env:
      VERSION: ${{ needs.build.outputs.VERSION }}
      TEST_ENV: staging
    permissions:
      contents: write 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: 安裝 Bun
        run: curl -fsSL https://bun.sh/install | bash
      - name: 設定 Bun 路徑
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Install GitHub CLI
        run: sudo apt install gh -y
      - name: Run Staging Tests
        run: |
          echo "Running staging integration tests with TEST_ENV=$TEST_ENV..."
          echo "✅ Staging integration tests passed"
      - name: Create Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="staging-${VERSION}"
          NOTE="🧪 Staging build for version ${VERSION}"
          echo "Creating release ${TAG}"
          gh release create "$TAG" "build-${VERSION}.zip" --notes "$NOTE"

  # ---------- PRODUCTION DEPLOY ----------
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, unit-test, integration-test, deploy-staging]
    environment: production
    env:
      VERSION: ${{ needs.build.outputs.VERSION }}
      TEST_ENV: production
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: 安裝 Bun
        run: curl -fsSL https://bun.sh/install | bash
      - name: 設定 Bun 路徑
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Install GitHub CLI
        run: sudo apt install gh -y
      - name: Run Production Tests
        run: |
          echo "Running production integration tests with TEST_ENV=$TEST_ENV..."
          echo "✅ Production integration tests passed"
      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🧩 Using version: ${VERSION}"
          TAG="v${VERSION}"
          NOTE="🚀 Production release for version ${VERSION}"
          echo "Creating release ${TAG}"
          if [ ! -f "build-${VERSION}.zip" ]; then
            echo "❌ Build file not found: build-${VERSION}.zip"
            exit 1
          fi
          gh release create "$TAG" "build-${VERSION}.zip" --notes "$NOTE" || {
            echo "⚠️ Release failed, rollbacking..."
            gh release delete "$TAG" -y || echo "⚠️ Rollback skipped (release not found)"
            exit 1
          }
  # ---------- FAILURE HANDLING (O-level) ----------
  test-failure-handling:
    name: 🚨 Test Failure Actions
    runs-on: ubuntu-latest
    # ✅ 只有當 unit-test 或 integration-test 失敗時才執行
    needs: [unit-test, integration-test]
    if: ${{ always() && (needs.unit-test.result == 'failure' || needs.integration-test.result == 'failure') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # ✅ 自動建立新的 GitHub Issue
      - name: Create New Failure Issue
        uses: actions/github-script@v7
        id: create_issue
        env:
          FAILURE_JOB: ${{ needs.unit-test.result == 'failure' && 'Unit Test' || needs.integration-test.result == 'failure' && 'Integration Test' }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { FAILURE_JOB, RUN_URL } = process.env;
            const title = `🚨 [CI/CD Failure] ${FAILURE_JOB} failed in workflow run #${context.runNumber}`;
            const body = `The **${FAILURE_JOB}** job failed in the CI/CD pipeline.\n\n`
                       + `- **Workflow:** \`${context.workflow}\`\n`
                       + `- **Branch:** \`${context.ref}\`\n`
                       + `- **Check Run:** [View Workflow Run](${RUN_URL})\n\n`
                       + `Please investigate the cause immediately.`;
                       
            const response = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['bug', 'ci-failure']
            });
            
            // 儲存 Issue 號碼供下一步使用
            core.setOutput('ISSUE_NUMBER', response.data.number);

      # ✅ 整合測試結果通知 (評論到 Issue 或 PR - 這裡評論到剛建立的 Issue)
      - name: Comment on Failure Issue
        uses: actions/github-script@v7
        if: success() # 確保 Issue 成功創建
        env:
          ISSUE_NUMBER: ${{ steps.create_issue.outputs.ISSUE_NUMBER }}
          FAILURE_JOB: ${{ env.FAILURE_JOB }} # 延續上一步的環境變數
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { ISSUE_NUMBER, FAILURE_JOB } = process.env;
            const jobLink = `[${FAILURE_JOB} Job](${process.env.RUN_URL}#${FAILURE_JOB.replace(/\s/g, '-')})`;
            const commentBody = `---
            👋 **Automated Test Notification:**
            The **${FAILURE_JOB}** failed. This issue has been automatically created for tracking.
            Please refer to the log in the ${jobLink} for details.
            ---`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ISSUE_NUMBER,
              body: commentBody
            });
            console.log(`Commented on issue #${ISSUE_NUMBER}`);
