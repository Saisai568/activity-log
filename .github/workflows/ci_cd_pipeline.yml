name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:

jobs:
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get version (auto detect)
        id: version
        run: |
          if [ -f "package.json" ] && node -e "v=require('./package.json').version; if(!v) process.exit(1)" 2>/dev/null; then
            VERSION=$(node -p "require('./package.json').version")
          else
            GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$GIT_TAG" ]; then
              VERSION="${GIT_TAG#v}"
            else
              VERSION="0.0.0-$(git rev-parse --short HEAD)"
            fi
          fi

          echo "‚úÖ Version detected: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build and zip
        run: |
          npm install
          npm run build || echo "‚ö†Ô∏è No build script, skipping build"
          zip -r build.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-staging:
    name: üß™ Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    env:
      VERSION: ${{ needs.build.outputs.VERSION }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      - name: Install GitHub CLI
        run: sudo apt install -y gh

      - name: Create Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="staging-v${VERSION}"
          NOTE="üß™ Staging build for version ${VERSION}"

          echo "Creating release ${TAG}..."
          if ! gh release create "$TAG" "build.zip" --notes "$NOTE"; then
            echo "‚ö†Ô∏è Release failed, rollbacking..."
            gh release delete "$TAG" -y || echo "‚ö†Ô∏è No release to rollback"
            exit 1
          fi

  deploy-production:
    name: üöÄ Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    env:
      VERSION: ${{ needs.build.outputs.VERSION }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      - name: Install GitHub CLI
        run: sudo apt install -y gh

      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${VERSION}"
          NOTE="üöÄ Production release for version ${VERSION}"

          echo "Creating release ${TAG}..."
          if ! gh release create "$TAG" "build.zip" --notes "$NOTE"; then
            echo "‚ö†Ô∏è Release failed, rollbacking..."
            gh release delete "$TAG" -y || echo "‚ö†Ô∏è No release to rollback"
            exit 1
          fi
