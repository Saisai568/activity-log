name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:  # ÊâãÂãïËß∏ÁôºÔºàÊñπ‰æøÊ∏¨Ë©¶Ôºâ

jobs:
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: ÂÆâË£ù Bun
        run: curl -fsSL https://bun.sh/install | bash

      - name: Ë®≠ÂÆö Bun Ë∑ØÂæë
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Get version from package.json or git
        id: version
        run: |
          if [ -f "package.json" ] && node -e "v=require('./package.json').version; if(!v) process.exit(1)" 2>/dev/null; then
            VERSION=$(node -p "require('./package.json').version")
          else
            GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$GIT_TAG" ]; then
              VERSION="${GIT_TAG#v}"
            else
              VERSION="0.0.0-$(git rev-parse --short HEAD)"
            fi
          fi
          echo "‚úÖ Version detected: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies & build
        run: |
          npm install
          npm run build
          zip -r build-${{ env.VERSION }}.zip .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build-${{ env.VERSION }}.zip

  # ---------- UNIT TEST ----------
  unit-test:
    name: üß™ Unit Test
    runs-on: ubuntu-latest
    needs: build
    env:
      TEST_ENV: unit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/

      - name: ÂÆâË£ù Bun
        run: curl -fsSL https://bun.sh/install | bash

      - name: Ë®≠ÂÆö Bun Ë∑ØÂæë
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Run Unit Tests and Generate Coverage Report
        run: |
          npm install
          # ‚úÖ Âü∑Ë°å Jest ‰∏¶Áî¢ÁîüË¶ÜËìãÁéáÂ†±Âëä
          npm test:unit -- --coverage || (echo "‚ùå Unit tests failed" && exit 1)
          
      # ‚úÖ Êñ∞Â¢ûÔºöÂ∞áË¶ÜËìãÁéáÂ†±Âëä‰ΩúÁÇ∫ Artifact ‰∏äÂÇ≥
      - name: Upload Test Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          # ÂÅáË®≠ Jest È†êË®≠Ëº∏Âá∫Âà∞ coverage/ Ë≥áÊñôÂ§æ
          path: coverage/
          retention-days: 7

  # ---------- INTEGRATION TEST ----------
  integration-test:
    name: üîó Integration Test
    runs-on: ubuntu-latest
    needs: unit-test
    env:
      TEST_ENV: integration
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: Run Integration Tests
        run: |
          echo "Running Integration Tests in $TEST_ENV environment..."
          npm install
          npm run test:integration || (echo "‚ùå Unit tests failed" && exit 1)

  # ---------- DEV RELEASE ----------
  release:
    name: üì¶ Dev Release
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test]
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: Check dist files
        run: |
          echo "Checking files in dist/"
          ls -al dist/
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "‚úÖ Tests passed. Releasing new dev build..."
          gh release create "dev-$(date +%s)" dist/* --notes "Automated dev release after successful tests"

  # ---------- STAGING DEPLOY ----------
  deploy-staging:
    name: üß™ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, unit-test, integration-test]
    environment: staging
    env:
      VERSION: ${{ needs.build.outputs.VERSION }}
      TEST_ENV: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: ÂÆâË£ù Bun
        run: curl -fsSL https://bun.sh/install | bash
      - name: Ë®≠ÂÆö Bun Ë∑ØÂæë
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Install GitHub CLI
        run: sudo apt install gh -y
      - name: Run Staging Tests
        run: |
          echo "Running staging integration tests with TEST_ENV=$TEST_ENV..."
          echo "‚úÖ Staging integration tests passed"
      - name: Create Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="staging-${VERSION}"
          NOTE="üß™ Staging build for version ${VERSION}"
          echo "Creating release ${TAG}"
          gh release create "$TAG" "build-${VERSION}.zip" --notes "$NOTE"

  # ---------- PRODUCTION DEPLOY ----------
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, unit-test, integration-test, deploy-staging]
    environment: production
    env:
      VERSION: ${{ needs.build.outputs.VERSION }}
      TEST_ENV: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: ÂÆâË£ù Bun
        run: curl -fsSL https://bun.sh/install | bash
      - name: Ë®≠ÂÆö Bun Ë∑ØÂæë
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Install GitHub CLI
        run: sudo apt install gh -y
      - name: Run Production Tests
        run: |
          echo "Running production integration tests with TEST_ENV=$TEST_ENV..."
          echo "‚úÖ Production integration tests passed"
      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üß© Using version: ${VERSION}"
          TAG="v${VERSION}"
          NOTE="üöÄ Production release for version ${VERSION}"
          echo "Creating release ${TAG}"
          if [ ! -f "build-${VERSION}.zip" ]; then
            echo "‚ùå Build file not found: build-${VERSION}.zip"
            exit 1
          fi
          gh release create "$TAG" "build-${VERSION}.zip" --notes "$NOTE" || {
            echo "‚ö†Ô∏è Release failed, rollbacking..."
            gh release delete "$TAG" -y || echo "‚ö†Ô∏è Rollback skipped (release not found)"
            exit 1
          }
