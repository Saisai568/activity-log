name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:  # ÊâãÂãïËß∏ÁôºÔºàÂª∫Ë≠∞ÈÄôÊ®£ÂÅöÔºåÊñπ‰æøÊ∏¨Ë©¶Ôºâ

jobs:
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: ÂÆâË£ù Bun
        run: curl -fsSL https://bun.sh/install | bash

      - name: Ë®≠ÂÆö Bun Ë∑ØÂæë
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Get version from package.json or git
        id: version
        run: |
          # Â¶ÇÊûú package.json Â≠òÂú®‰∏îÊúâ version Ê¨Ñ‰ΩçÂ∞±ÂèñÁî®
          if [ -f "package.json" ] && node -e "v=require('./package.json').version; if(!v) process.exit(1)" 2>/dev/null; then
            VERSION=$(node -p "require('./package.json').version")
          else
            # Âê¶ÂâáÂæû git tag ÂèñÔºåËã•Ê≤íÊúâ tag Â∞±Áî® commit hash
            GIT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$GIT_TAG" ]; then
              VERSION="${GIT_TAG#v}"   # ÂéªÈô§ÂâçÈù¢ÁöÑ v
            else
              VERSION="0.0.0-$(git rev-parse --short HEAD)"
            fi
          fi

          echo "‚úÖ Version detected: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies & build
        run: |
          npm install
          npm run build
          zip -r build-${{ env.VERSION }}.zip .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build-${{ env.VERSION }}.zip

  deploy-staging:
    name: üß™ Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    env:
      VERSION: ${{ needs.build.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: ÂÆâË£ù Bun
        run: curl -fsSL https://bun.sh/install | bash

      - name: Ë®≠ÂÆö Bun Ë∑ØÂæë
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Install GitHub CLI
        run: sudo apt install gh -y

      - name: Create Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="staging-${VERSION}"
          NOTE="üß™ Staging build for version ${VERSION}"
          echo "Creating release ${TAG}"
          gh release create "$TAG" "build-${VERSION}.zip" --notes "$NOTE"

  deploy-production:
    name: üöÄ Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production   # ‚úÖ ÈúÄÂØ©Ê†∏ÊâçÊúÉÂü∑Ë°å
    env:
      VERSION: ${{ needs.build.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: ÂÆâË£ù Bun
        run: curl -fsSL https://bun.sh/install | bash

      - name: Ë®≠ÂÆö Bun Ë∑ØÂæë
        run: echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Install GitHub CLI
        run: sudo apt install gh -y

      - name: Create production release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${VERSION}"
          NOTE="üöÄ Production release for version ${VERSION}"
          echo "Creating release ${TAG}"
          gh release create "$TAG" "build-${VERSION}.zip" --notes "$NOTE" || {
            echo "‚ö†Ô∏è Release failed, rollbacking..."
            gh release delete "$TAG" -y
            exit 1
          }
